var range_slider=function(y){if(y&&typeof y.selector!=="string"){throw"init() needs a selector string or an object which contains a selector string called 'element'";
return false;}if((!(typeof y.min==="number"&&typeof y.max==="number"))||y.min>y.max){throw"init() needs a min and max in its parameter object, which are both numbers and the min is smaller than the max";
return false;}if(y.left_scrubber_pos!=undefined&&(typeof y.left_scrubber_pos!=="number")){throw"The value inside left_scrubber_pos is not a number";}if(y.right_scrubber_pos!=undefined&&(typeof y.right_scrubber_pos!=="number")){throw"The value inside left_scrubber_pos is not a number";
}var g=this,t=$(y.selector).empty(),s=$("<div />").addClass("labels").appendTo(t),p=$("<span />").attr("id","left-label").appendTo(s),a=$("<span />").addClass("right-label").appendTo(s),B=$("<div />").addClass("slider-bar").appendTo(t),c=$("<div />").addClass("left-scrubber scrubber").appendTo(B),h=$("<div />").addClass("right-scrubber scrubber").appendTo(B),k=$("<div />").addClass("range").appendTo(B),A=function(E){var D=E/(B.width()-(e*2)),F=u-q;
if(D==Infinity){D=0;}return q+(F*D);},r=function(D){return(D-q)/(u-q)*(B.width()-(e*2));},z=function(D){return Math.round(D/f)*f;},w=function(D){return Math.floor(D/f)*f;
},b=function(D){return Math.ceil(D/f)*f;},m=function(D){if(typeof y.thousand_separator!=="string"){console.warn("thousand_separator needs to be of type String");
return D;}else{return D.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1"+y.thousand_separator);}},i=function(){if(y.rounded){k.css({left:C+e-(e/2),width:(v-C)});
}else{k.css({left:C+e,width:(v-C-e)});}},q=y.min,u=y.max,e=c.width(),n=typeof y.unit==="string"?y.unit:"",f=typeof y.round_by==="number"?y.round_by:1,C,v,l=false,d=false,j=false,x=false,o;
q=w(q);u=b(u);if(c.width()!==h.width()){throw"The left and right scrubbers width's do not match, they must be the same for this to work correctly";}g.updateMin=function(F){F=parseFloat(F);
if(F!=w(F)){console.warn("value is not a devision of the round_by value, "+F+" has been rounded to "+z(F));}if(!isNaN(F)){var D=A(C),E=A(v);if(isNaN(D)){D=q;
}if(isNaN(E)){E=u;}q=w(F);g.updateScrubbers(D,E);}else{console.error("value parsed in is not a number.");}};g.updateMax=function(F){F=parseFloat(F);if(F!=b(F)){console.warn("value is not a devision of the round_by value, "+F+" has been rounded to "+z(F));
}if(!isNaN(F)){var D=A(C),E=A(v-e);if(isNaN(D)){D=q;}if(isNaN(E)){E=u;}u=b(F);g.updateScrubbers(D,E);}else{console.error("value parsed in is not a number.");
}};g.updateRange=function(E,F){E=parseFloat(E);F=parseFloat(F);if(!isNaN(E)&&!isNaN(F)&&E<=F){var D=F<=q||E>=u;if(E>u){g.updateMax(F);g.updateMin(E);}else{g.updateMin(E);
g.updateMax(F);}if(D){g.updateScrubbers(E,F);}}else{console.error("values parsed in are not numbers or left scrubber value is larger than the right scrubber value.");
}};g.updateLeftScrubber=function(D){if(!isNaN(parseFloat(D))){C=r(D<=q?q:D);C=C>=v-e-r(q+f)?v-e-r(q+f):C;C=C>0?C:0;if(y.fixed){p.text(z(A(C)).toFixed(1)+n);
}else{p.text(z(A(C))+n);}c.css("left",C);i();}else{console.error("value parsed in is not a number.");}};g.updateRightScrubber=function(D){if(!isNaN(parseFloat(D))){v=r(D>=u?u:D)+e;
v=v<=C+e+r(q+f)?C+e+r(q+f):v;if(isNaN(v)){v=B.width()-e;}if(y.fixed){a.text(z(A(v-e)).toFixed(1)+n);}else{a.text(z(A(v-e))+n);}h.css("left",v);i();}else{console.error("value parsed in is not a number.");
}};g.updateScrubbers=function(E,D){E=parseFloat(E);D=parseFloat(D);if(!isNaN(E)&&!isNaN(D)&&E<=D){C=r(q);v=r(u);if(isNaN(C)){C=0;}if(isNaN(v)){v=B.width()-e;
}g.updateLeftScrubber(E);g.updateRightScrubber(D);}else{console.error("values parsed in are not numbers or left scrubber value is larger than the right scrubber value.");
}};g.release=function(D){if(typeof y.release==="function"){y.release(D);}};this.updateScrubbers(typeof y.left_scrubber_pos==="number"?y.left_scrubber_pos:q,typeof y.right_scrubber_pos==="number"?y.right_scrubber_pos:u);
c.mouseover(function(){l=true;});h.mouseover(function(){d=true;});c.mouseout(function(){l=false;});h.mouseout(function(){d=false;});B.bind("mousedown touchstart",function(G){G.preventDefault();
var I=Math.abs,F=G.clientX?G.clientX:G.originalEvent.touches[0].pageX,H=(F-B.offset().left),E=I(H-C),D=I(H-v);x=false;j=false;if(l){o=H-parseFloat(c.css("left"));
j=true;}else{if(d){o=H-parseFloat(h.css("left"));x=true;}else{o=e/2;if(E<D){j=true;g.updateLeftScrubber(A(H-o));}else{x=true;g.updateRightScrubber(A(H-e-o));
}}}});$(document).bind("mousemove touchmove",function(G){var F=G.clientX?G.clientX:G.originalEvent.touches[0].pageX,H=F-B.offset().left;if(j){var E=H-o;
g.updateLeftScrubber(A(E));}if(x){var D=H-o-e;g.updateRightScrubber(A(D));}});$(document).bind("mouseup touchend",function(D){if(j||x){g.release({min:z(A(C)),max:z(A(v-e))});
}j=false;x=false;});};